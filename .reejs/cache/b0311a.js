/* esm.sh - esbuild bundle(micromark-extension-mdxjs-esm@1.0.5) node production */
import{blankLine as C}from"./6f6cff.js";import{asciiAlpha as v,markdownLineEnding as j}from"./967460.js";import{eventsToAcorn as z}from"./12fee0.js";import{positionFromEstree as A}from"./3f18d8.js";import{VFileMessage as k}from"./e20bba.js";var B={tokenize:O,partial:!0},I=new Set(["ExportAllDeclaration","ExportDefaultDeclaration","ExportNamedDeclaration","ImportDeclaration"]);function M(e){let s={tokenize:p,concrete:!0};if(!e||!e.acorn||!e.acorn.parse)throw new Error("Expected an `acorn` instance passed in as `options.acorn`");let m=e.acorn,u=Object.assign({ecmaVersion:2020,sourceType:"module"},e.acornOptions);return{flow:{[101]:s,[105]:s}};function p(r,S,c){let i=this,a=i.parser.definedModuleSpecifiers||(i.parser.definedModuleSpecifiers=[]),y=this.events.length+1,l="";return i.interrupt?c:D;function D(n){return i.now().column>1?c(n):(r.enter("mdxjsEsm"),r.enter("mdxjsEsmData"),r.consume(n),l+=String.fromCharCode(n),x)}function x(n){return v(n)?(r.consume(n),l+=String.fromCharCode(n),x):(l==="import"||l==="export")&&n===32?(r.consume(n),d):c(n)}function d(n){return n===null||j(n)?(r.exit("mdxjsEsmData"),f(n)):(r.consume(n),d)}function f(n){return n===null?E(n):j(n)?r.check(B,E,h)(n):(r.enter("mdxjsEsmData"),d(n))}function h(n){return r.enter("lineEnding"),r.consume(n),r.exit("lineEnding"),f}function E(n){let t=z(i.events.slice(y),{acorn:m,acornOptions:u,prefix:a.length>0?"var "+a.join(",")+`
`:""});if(t.error){if(n!==null&&t.swallow)return h(n);throw new k("Could not parse import/exports with acorn: "+String(t.error),{line:t.error.loc.line,column:t.error.loc.column+1,offset:t.error.pos},"micromark-extension-mdxjs-esm:acorn")}if(a.length>0){let o=t.estree.body.shift()}let w=-1;for(;++w<t.estree.body.length;){let o=t.estree.body[w];if(!I.has(o.type))throw new k("Unexpected `"+o.type+"` in code: only import/exports are supported",A(o),"micromark-extension-mdxjs-esm:non-esm");if(o.type==="ImportDeclaration"&&!i.interrupt){let g=-1;for(;++g<o.specifiers.length;){let b=o.specifiers[g];a.push(b.local.name)}}}return Object.assign(r.exit("mdxjsEsm"),e.addResult?{estree:t.estree}:void 0),S(n)}}}function O(e,s,m){return u;function u(p){return e.enter("lineEndingBlank"),e.consume(p),e.exit("lineEndingBlank"),e.attempt(C,s,m)}}export{M as mdxjsEsm};
//# sourceMappingURL=micromark-extension-mdxjs-esm.mjs.map