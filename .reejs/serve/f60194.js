import React from "../cache/e2d12d.js";
/*@jsxRuntime automatic @jsxImportSource react*/
function _createMdxContent(props) {
  const _components = Object.assign({
    h1: "h1",
    p: "p",
    h2: "h2",
    code: "code",
    strong: "strong",
    pre: "pre",
    span: "span",
    hr: "hr",
    a: "a"
  }, props.components);
  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, "Project Structure And How It Works"), "\n", React.createElement(_components.p, null, "By default Reejs creates the following project structure:"), "\n", React.createElement(_components.h2, null, "Page Routing"), "\n", React.createElement(_components.p, null, "The ", React.createElement(_components.code, null, "src/pages"), " allows you to place any ", React.createElement(_components.code, null, "<page>.<extension>"), " file in it where the ", React.createElement(_components.code, null, "extension"), " can by one of ", React.createElement(_components.code, null, "tsx, ts, jsx, js, mdx, md"), " files.\nDo note that the markdown(x) ", React.createElement(_components.strong, null, "ree"), "ndered will by unstyle\nd. You're expected to wrap your markdown in a component and style it yourself."), "\n", React.createElement(_components.p, null, "Any filename starting with an underscore (", React.createElement(_components.code, null, "_"), ") will ", React.createElement(_components.strong, null, "not be reegistered"), " by the default Packit Readers & Writers as a page. This allows you to create special pages that you can import into other pages or could be used by third party Packit plugins. A good example would be the ", React.createElement(_components.code, null, "_app.tsx"), " file that is used by the default Packit plugins to wrap your pages inside it."), "\n", React.createElement(_components.p, null, "Example of a page:"), "\n", React.createElement(_components.pre, null, React.createElement(_components.code, { className: "hljs language-js" ,}, React.createElement(_components.span, { className: "hljs-comment",}, "// src/pages/index.jsx"), "\n", React.createElement(_components.span, { className: "hljs-keyword",}, "export"), " ", React.createElement(_components.span, { className: "hljs-keyword",}, "default"), " ", React.createElement(_components.span, { className: "hljs-keyword",}, "function"), " ", React.createElement(_components.span, { className: "hljs-title function_" ,}, "Index"), "(", React.createElement(_components.span, { className: "hljs-params",} ), ") {\n  ", React.createElement(_components.span, { className: "hljs-keyword",}, "return"), " ", React.createElement(_components.span, { className: "xml",}, React.createElement(_components.span, { className: "hljs-tag",}, "<", React.createElement(_components.span, { className: "hljs-name",}, "h1"), ">"), "Hello World!", React.createElement(_components.span, { className: "hljs-tag",}, "</", React.createElement(_components.span, { className: "hljs-name",}, "h1"), ">")), ";\n}\n")), "\n", React.createElement(_components.hr, null ), "\n", React.createElement(_components.h2, null, "API Routing"), "\n", React.createElement(_components.p, null, "As for the ", React.createElement(_components.code, null, "src/pages/api"), " directory, Packit by default uses it by default for serving it as an API route instead of ", React.createElement(_components.strong, null, "ree"), "ndering it as a page. This allows you to create API routes that can be used by your pages or by third party Packit plugins.\nA router can only have a parameter ", React.createElement(_components.code, null, "c"), " which is the ", React.createElement(_components.code, null, "Context"), " object of the current request, which is passed down from ", React.createElement(_components.a, { href: "https://hono.dev/api/context",}, "Hono's context"), "."), "\n", React.createElement(_components.p, null, "Any filename starting with an underscore (", React.createElement(_components.code, null, "_"), ") will ", React.createElement(_components.strong, null, "be reegistered"), " by the default Packit Readers & Writers as an API ", React.createElement(_components.strong, null, "middleware"), ". All the middlewares are setup before any route (including API routes) is ", React.createElement(_components.strong, null, "ree"), "gistered, and can be sorted in order with the optional ", React.createElement(_components.code, null, "index"), " variable that you need to export alongside your middleware.\nBy default, the value of ", React.createElement(_components.code, null, "index"), " is ", React.createElement(_components.code, null, "0"), " and the middlewares are not sorted in any particular order.\nA middleware can only have a parameter ", React.createElement(_components.code, null, "c"), " which is the ", React.createElement(_components.code, null, "Context"), " object of the current request, which is passed down from ", React.createElement(_components.a, { href: "https://hono.dev/api/context",}, "Hono's context"), "."), "\n", React.createElement(_components.p, null, "Example of a middleware:"), "\n", React.createElement(_components.pre, null, React.createElement(_components.code, { className: "hljs language-js" ,}, React.createElement(_components.span, { className: "hljs-comment",}, "// src/pages/api/_*.js"), "\n\n", React.createElement(_components.span, { className: "hljs-comment",}, "//Since our filename starts with an underscore, it will be registered as a middleware. And since we have \"*\" after the underscore, it will be registered as a middleware for all the routes that are registered after it."), "\n", React.createElement(_components.span, { className: "hljs-keyword",}, "export"), " ", React.createElement(_components.span, { className: "hljs-keyword",}, "default"), " ", React.createElement(_components.span, { className: "hljs-keyword",}, "function"), "(", React.createElement(_components.span, { className: "hljs-params",}, "c"), "){\n  ", React.createElement(_components.span, { className: "hljs-variable language_" ,}, "console"), ".", React.createElement(_components.span, { className: "hljs-title function_" ,}, "log"), "(", React.createElement(_components.span, { className: "hljs-string",}, "\"This is a middleware!\""), ");\n}\n\n", React.createElement(_components.span, { className: "hljs-keyword",}, "export"), " ", React.createElement(_components.span, { className: "hljs-keyword",}, "const"), " index = ", React.createElement(_components.span, { className: "hljs-number",}, "1"), "; ", React.createElement(_components.span, { className: "hljs-comment",}, "//This will make sure that this middleware is registered after all the other middlewares that have an index of 0."), "\n")), "\n", React.createElement(_components.p, null, "Using Hono's built in middleware(s):"), "\n", React.createElement(_components.pre, null, React.createElement(_components.code, { className: "hljs language-js" ,}, React.createElement(_components.span, { className: "hljs-comment",}, "// src/pages/api/_*.js"), "\n\n", React.createElement(_components.span, { className: "hljs-keyword",}, "import"), " { logger } ", React.createElement(_components.span, { className: "hljs-keyword",}, "from"), " ", React.createElement(_components.span, { className: "hljs-string",}, "'npm:hono/logger'"), ";\n\n", React.createElement(_components.span, { className: "hljs-keyword",}, "export"), " ", React.createElement(_components.span, { className: "hljs-keyword",}, "default"), " logger;\n")), "\n", React.createElement(_components.p, null, React.createElement(_components.strong, null, "Ree"), "gistering a route:"), "\n", React.createElement(_components.pre, null, React.createElement(_components.code, { className: "hljs language-js" ,}, React.createElement(_components.span, { className: "hljs-comment",}, "// src/pages/api/index.js"), "\n\n", React.createElement(_components.span, { className: "hljs-keyword",}, "export"), " ", React.createElement(_components.span, { className: "hljs-keyword",}, "default"), " ", React.createElement(_components.span, { className: "hljs-keyword",}, "function"), "(", React.createElement(_components.span, { className: "hljs-params",}, "c"), ") {\n  ", React.createElement(_components.span, { className: "hljs-keyword",}, "return"), " c.", React.createElement(_components.span, { className: "hljs-title function_" ,}, "json"), "({ ", React.createElement(_components.span, { className: "hljs-attr",}, "message"), ": ", React.createElement(_components.span, { className: "hljs-string",}, "'Hello!'"), " });\n}\n")), "\n", React.createElement(_components.p, null, "You can read more about the ", React.createElement(_components.code, null, "Context"), " object ", React.createElement(_components.a, { href: "https://hono.dev/api/context",}, "here"), ", and ", React.createElement(_components.code, null, "HonoRequest"), " object ", React.createElement(_components.a, { href: "https://hono.dev/api/request",}, "here"), "."), "\n", React.createElement(_components.hr, null ), "\n", React.createElement(_components.p, null, "You can read how How Hono's routing works ", React.createElement(_components.a, { href: "https://hono.dev/api/routing",}, "here"), "."));
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? React.createElement(MDXLayout, { ...props,}, React.createElement(_createMdxContent, { ...props,} )) : _createMdxContent(props);
}
export default MDXContent;

//# sourceURL=src/md/basics/struct.mdx