import React from "../cache/e2d12d.js";
/*@jsxRuntime automatic @jsxImportSource react*/
function _createMdxContent(props) {
  const _components = Object.assign({
    h1: "h1",
    p: "p",
    a: "a",
    h2: "h2",
    pre: "pre",
    code: "code",
    span: "span"
  }, props.components);
  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, "Introduction"), "\n", React.createElement(_components.p, null, "Welcome to Ree.js Documentation! This docmentation is for the latest version of Ree.js. If you are using an older version, please refer to the\n", React.createElement(_components.a, { href: "#",}, "Older Versions"), " section."), "\n", React.createElement(_components.h2, null, "What Is Reejs?"), "\n", React.createElement(_components.p, null, "Reejs/Ree.js is a framework for building web applications at scale. It is designed to be simple, flexible and powerful."), "\n", React.createElement(_components.p, null, "With Ree.js, your code stays small in size, and your development experience becomes better and your code builds instantly.\nLoad most of the npm & deno modules via URL Imports and they just work ðŸš€"), "\n", React.createElement(_components.pre, null, React.createElement(_components.code, { className: "hljs language-jsx" ,}, React.createElement(_components.span, { className: "hljs-keyword",}, "import"), " {useEffect, useState} ", React.createElement(_components.span, { className: "hljs-keyword",}, "from"), " ", React.createElement(_components.span, { className: "hljs-string",}, "\"https://esm.sh/react\""), ";\n", React.createElement(_components.span, { className: "hljs-comment",}, "//or use the Import function"), "\n", React.createElement(_components.span, { className: "hljs-keyword",}, "import"), " ", React.createElement(_components.span, { className: "hljs-title class_" ,}, "Import"), " ", React.createElement(_components.span, { className: "hljs-keyword",}, "from"), " ", React.createElement(_components.span, { className: "hljs-string",}, "\"@reejs/imports\""), ";\n", React.createElement(_components.span, { className: "hljs-keyword",}, "let"), " confetti = ", React.createElement(_components.span, { className: "hljs-keyword",}, "await"), " ", React.createElement(_components.span, { className: "hljs-title class_" ,}, "Import"), "(", React.createElement(_components.span, { className: "hljs-string",}, "\"https://esm.sh/canvas-confetti\""), ");\n\n", React.createElement(_components.span, { className: "hljs-keyword",}, "export"), " ", React.createElement(_components.span, { className: "hljs-keyword",}, "default"), " ", React.createElement(_components.span, { className: "hljs-keyword",}, "function"), " ", React.createElement(_components.span, { className: "hljs-title function_" ,}, "App"), "(", React.createElement(_components.span, { className: "hljs-params",} ), ") {\n  ", React.createElement(_components.span, { className: "hljs-keyword",}, "const"), " [count, setCount] = ", React.createElement(_components.span, { className: "hljs-title function_" ,}, "useState"), "(", React.createElement(_components.span, { className: "hljs-number",}, "0"), ");\n\n  ", React.createElement(_components.span, { className: "hljs-title function_" ,}, "useEffect"), "(", React.createElement(_components.span, { className: "hljs-function",}, "() =>"), " {\n    ", React.createElement(_components.span, { className: "hljs-title function_" ,}, "confetti"), "({\n      ", React.createElement(_components.span, { className: "hljs-attr",}, "particleCount"), ": count,\n      ", React.createElement(_components.span, { className: "hljs-attr",}, "spread"), ": ", React.createElement(_components.span, { className: "hljs-number",}, "70"), ",\n      ", React.createElement(_components.span, { className: "hljs-attr",}, "origin"), ": { ", React.createElement(_components.span, { className: "hljs-attr",}, "y"), ": ", React.createElement(_components.span, { className: "hljs-number",}, "0.6"), " }\n    }, {\n      ", React.createElement(_components.span, { className: "hljs-attr",}, "resize"), ": ", React.createElement(_components.span, { className: "hljs-literal",}, "true"), "\n    });\n  }, []);\n\n  ", React.createElement(_components.span, { className: "hljs-keyword",}, "return"), " (\n    ", React.createElement(_components.span, { className: "xml",}, React.createElement(_components.span, { className: "hljs-tag",}, "<", React.createElement(_components.span, { className: "hljs-name",}, "div"), ">"), "\n      ", React.createElement(_components.span, { className: "hljs-tag",}, "<", React.createElement(_components.span, { className: "hljs-name",}, "h1"), ">"), "Hello, Ree.js!", React.createElement(_components.span, { className: "hljs-tag",}, "</", React.createElement(_components.span, { className: "hljs-name",}, "h1"), ">"), "\n      ", React.createElement(_components.span, { className: "hljs-tag",}, "<", React.createElement(_components.span, { className: "hljs-name",}, "button"), " ", React.createElement(_components.span, { className: "hljs-attr",}, "onClick"), "=", React.createElement(_components.span, { className: "hljs-string",}, "{()"), "=>"), "{setCount(count++)}}>Click me", React.createElement(_components.span, { className: "hljs-tag",}, "</", React.createElement(_components.span, { className: "hljs-name",}, "button"), ">"), "\n      ", React.createElement(_components.span, { className: "hljs-tag",}, "<", React.createElement(_components.span, { className: "hljs-name",}, "p"), ">"), "You clicked {count} times", React.createElement(_components.span, { className: "hljs-tag",}, "</", React.createElement(_components.span, { className: "hljs-name",}, "p"), ">"), "\n    ", React.createElement(_components.span, { className: "hljs-tag",}, "</", React.createElement(_components.span, { className: "hljs-name",}, "div"), ">")), "\n  );\n}\n")), "\n", React.createElement(_components.p, null, "The above code just works out of the box thanks to URL Imports feature. Rest assured, you only download what you need, and nothing more.\nHere the ", React.createElement(_components.code, null, "Import"), " function is used to load the ", React.createElement(_components.code, null, "canvas-confetti"), " module from ", React.createElement(_components.code, null, "esm.sh"), " CDN. You could also just use ", React.createElement(_components.code, null, "Import(\"canvas-confetti\")"), " and it will automatically load the module from ", React.createElement(_components.code, null, "esm.sh"), " CDN.\nAnd just like how you can use the ", React.createElement(_components.code, null, "npm:"), " specifier in Deno, you can use the ", React.createElement(_components.code, null, "npm:"), " specifier in Ree.js as well."), "\n", React.createElement(_components.pre, null, React.createElement(_components.code, { className: "hljs language-js" ,}, React.createElement(_components.span, { className: "hljs-keyword",}, "import"), " chalk ", React.createElement(_components.span, { className: "hljs-keyword",}, "from"), " ", React.createElement(_components.span, { className: "hljs-string",}, "\"npm:chalk\""), ";\n", React.createElement(_components.span, { className: "hljs-comment",}, "//use it like you would normally do"), "\n", React.createElement(_components.span, { className: "hljs-variable language_" ,}, "console"), ".", React.createElement(_components.span, { className: "hljs-title function_" ,}, "log"), "(chalk.", React.createElement(_components.span, { className: "hljs-title function_" ,}, "red"), "(", React.createElement(_components.span, { className: "hljs-string",}, "\"Man I really love Ree.js!\""), "));\n")), "\n", React.createElement(_components.p, null, "How cool is that? ðŸ¤©"));
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? React.createElement(MDXLayout, { ...props,}, React.createElement(_createMdxContent, { ...props,} )) : _createMdxContent(props);
}
export default MDXContent;

//# sourceURL=src/md/gettingStarted/introduction.mdx