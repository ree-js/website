import React from "../cache/e2d12d.js";
/*@jsxRuntime automatic @jsxImportSource react*/
/*give a basic info on what url imports is and how to use them in reejs*/
function _createMdxContent(props) {
  const _components = Object.assign({
    h1: "h1",
    p: "p",
    pre: "pre",
    code: "code",
    span: "span",
    a: "a",
    h3: "h3"
  }, props.components);
  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, "URL Imports"), "\n", "\n", React.createElement(_components.p, null, "URL Imports are a way to import a file from a url. This is useful for importing dependencies from a CDN or from a remote server."), "\n", React.createElement(_components.pre, null, React.createElement(_components.code, { className: "hljs language-js" ,}, React.createElement(_components.span, { className: "hljs-comment",}, "// Importing a file from a url"), "\n", React.createElement(_components.span, { className: "hljs-keyword",}, "import"), " {\n  add,\n  multiply,\n} ", React.createElement(_components.span, { className: "hljs-keyword",}, "from"), " ", React.createElement(_components.span, { className: "hljs-string",}, "\"https://x.nest.land/ramda@0.27.0/source/index.js\""), ";\n\n", React.createElement(_components.span, { className: "hljs-keyword",}, "function"), " ", React.createElement(_components.span, { className: "hljs-title function_" ,}, "totalCost"), "(", React.createElement(_components.span, { className: "hljs-params",}, "outbound: number, inbound: number, tax: number"), "): number {\n  ", React.createElement(_components.span, { className: "hljs-keyword",}, "return"), " ", React.createElement(_components.span, { className: "hljs-title function_" ,}, "multiply"), "(", React.createElement(_components.span, { className: "hljs-title function_" ,}, "add"), "(outbound, inbound), tax);\n}\n\n", React.createElement(_components.span, { className: "hljs-variable language_" ,}, "console"), ".", React.createElement(_components.span, { className: "hljs-title function_" ,}, "log"), "(", React.createElement(_components.span, { className: "hljs-title function_" ,}, "totalCost"), "(", React.createElement(_components.span, { className: "hljs-number",}, "19"), ", ", React.createElement(_components.span, { className: "hljs-number",}, "31"), ", ", React.createElement(_components.span, { className: "hljs-number",}, "1.2"), "));\n", React.createElement(_components.span, { className: "hljs-variable language_" ,}, "console"), ".", React.createElement(_components.span, { className: "hljs-title function_" ,}, "log"), "(", React.createElement(_components.span, { className: "hljs-title function_" ,}, "totalCost"), "(", React.createElement(_components.span, { className: "hljs-number",}, "45"), ", ", React.createElement(_components.span, { className: "hljs-number",}, "27"), ", ", React.createElement(_components.span, { className: "hljs-number",}, "1.15"), "));\n\n", React.createElement(_components.span, { className: "hljs-comment",}, "/**\n * Output\n *\n * 60\n * 82.8\n */"), "\n")), "\n", React.createElement(_components.p, null, "You can import typescript or jsx files right from via URL Imports. This allows you to directly use ", React.createElement(_components.a, { href: "https://deno.land/x",}, "deno.land/x"), " or ", React.createElement(_components.a, { href: "https://nest.land",}, "nest.land"), " to import dependencies.\nAs long as Reejs has the necessary Deno polyfills for any Deno specific APIs used in the imported file, it will work."), "\n", React.createElement(_components.p, null, "Incase you were wondering about Deno permissions, Reejs will automatically grant all permissions to any file imported via URL Imports."), "\n", React.createElement(_components.pre, null, React.createElement(_components.code, { className: "hljs language-js" ,}, React.createElement(_components.span, { className: "hljs-comment",}, "// Importing a file from a url"), "\n", React.createElement(_components.span, { className: "hljs-keyword",}, "import"), " * ", React.createElement(_components.span, { className: "hljs-keyword",}, "as"), " denoGraph ", React.createElement(_components.span, { className: "hljs-keyword",}, "from"), " ", React.createElement(_components.span, { className: "hljs-string",}, "\"https://deno.land/x/deno_graph@0.49.0/mod.ts\""), ";\n\n", React.createElement(_components.span, { className: "hljs-keyword",}, "const"), " graph = ", React.createElement(_components.span, { className: "hljs-keyword",}, "await"), " denoGraph.", React.createElement(_components.span, { className: "hljs-title function_" ,}, "createGraph"), "(", React.createElement(_components.span, { className: "hljs-string",}, "\"https://esm.sh/react\""), ");\n", React.createElement(_components.span, { className: "hljs-variable language_" ,}, "console"), ".", React.createElement(_components.span, { className: "hljs-title function_" ,}, "log"), "(graph); ", React.createElement(_components.span, { className: "hljs-comment",}, "//just works :)"), "\n")), "\n", React.createElement(_components.h3, null, "Shouldn't it be tiresome to type out the whole url everytime?"), "\n", React.createElement(_components.p, null, "Well... Maybe? That's why we support import maps. Also you could use ", React.createElement(_components.code, null, "deps.{js/ts}"), " file from where you can declare all your depedencies and import from there, as Deno suggests.\nYou can read more about ", React.createElement(_components.code, null, "deps.{js/ts}"), " ", React.createElement(_components.a, { href: "https://deno.com/manual@v1.34.3/basics/modules#it-seems-unwieldy-to-import-urls-everywhere",}, "here"), "."));
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? React.createElement(MDXLayout, { ...props,}, React.createElement(_createMdxContent, { ...props,} )) : _createMdxContent(props);
}
export default MDXContent;

//# sourceURL=src/md/basics/urlImports.mdx