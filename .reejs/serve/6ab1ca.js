import React from "../cache/e2d12d.js";
/*@jsxRuntime automatic @jsxImportSource react*/
import Alert from "./1a8724.js";
function _createMdxContent(props) {
  const _components = Object.assign({
    h1: "h1",
    blockquote: "blockquote",
    p: "p",
    strong: "strong",
    code: "code",
    ul: "ul",
    li: "li",
    hr: "hr",
    h2: "h2",
    pre: "pre",
    span: "span",
    h3: "h3",
    a: "a"
  }, props.components);
  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, "Packit"), "\n", React.createElement(_components.blockquote, null, "\n", React.createElement(_components.p, null, "Ah yes, here we a", React.createElement(_components.strong, null, "ree"), "... A truly te", React.createElement(_components.strong, null, "ree"), "fying fast transpiler and plugin manager that powers Reejs! ⚡⚡⚡"), "\n"), "\n", React.createElement(_components.p, null, "Reejs uses it's own in-house file generator (you might call it file-to-file transpiler) that has a plugin system.\nPackit generally enables your code to use URL Imports directly without setting up ", React.createElement(_components.code, null, "import_map.json"), " (but reejs still needs import maps for your projects).\nAlongwith that, it allows transpiling different file extensions like ", React.createElement(_components.code, null, ".jsx"), " or ", React.createElement(_components.code, null, ".ts"), " files to js."), "\n", React.createElement(_components.p, null, "Packit is generally divided into four parts:"), "\n", React.createElement(_components.ul, null, "\n", React.createElement(_components.li, null, "Readers"), "\n", React.createElement(_components.li, null, "Transpilers"), "\n", React.createElement(_components.li, null, "Writers"), "\n", React.createElement(_components.li, null, "Copiers"), "\n"), "\n", React.createElement(_components.p, null, "Packit generates a ", React.createElement(_components.code, null, "packit/index.js"), " file in your project that is usually the entry point for the available services."), "\n", React.createElement(_components.hr, null ), "\n", React.createElement(_components.h2, null, "Using Packit"), "\n", React.createElement(_components.p, null, "As stated in the Commands section, you may use ", React.createElement(_components.code, null, "reejs packit <service> [options]"), " where the service must be one of the following:"), "\n", React.createElement(_components.ul, null, "\n", React.createElement(_components.li, null, React.createElement(_components.code, null, "node")), "\n", React.createElement(_components.li, null, React.createElement(_components.code, null, "deno"), " (under the hood it is replaced with ", React.createElement(_components.code, null, "deno-deploy"), ")"), "\n", React.createElement(_components.li, null, React.createElement(_components.code, null, "deno-deploy")), "\n", React.createElement(_components.li, null, React.createElement(_components.code, null, "bun")), "\n", React.createElement(_components.li, null, React.createElement(_components.code, null, "static")), "\n", React.createElement(_components.li, null, React.createElement(_components.code, null, "vercel")), "\n", React.createElement(_components.li, null, React.createElement(_components.code, null, "edge")), "\n"), "\n", React.createElement(_components.p, null, "By default, Packit packs your project as a production \"build\".\nYou may use ", React.createElement(_components.code, null, "--dev"), " or ", React.createElement(_components.code, null, "-d"), " flag to start a development server. For supported services, Packit will automatically run the appropriate command to start a development server as a child process."), "\n", React.createElement(Alert, { text: `We don't build your code, but since you know that "build" generally means building your code, we mean the final output of your code and not the "build process". Throughout the documentation, we'll refer to the final output of your code as "build", and Packit "packs" your code.`,} ), "\n", React.createElement(_components.hr, null ), "\n", React.createElement(_components.h2, null, "Configuration"), "\n", React.createElement(_components.p, null, "When generating a new Reejs project, ", React.createElement(_components.code, null, "packit.config.js"), " file will be already created at the root of the project.\nYou may add Packit-compatible plugins via this config file."), "\n", React.createElement(_components.p, null, "Here's a sample ", React.createElement(_components.code, null, "packit.config.js"), " file:"), "\n", React.createElement(_components.pre, null, React.createElement(_components.code, { className: "hljs language-js" ,}, React.createElement(_components.span, { className: "hljs-keyword",}, "export"), " ", React.createElement(_components.span, { className: "hljs-keyword",}, "default"), " {\n  ", React.createElement(_components.span, { className: "hljs-attr",}, "readers"), ": [],\n  ", React.createElement(_components.span, { className: "hljs-attr",}, "transpilers"), ": [],\n  ", React.createElement(_components.span, { className: "hljs-attr",}, "writers"), ": [],\n  ", React.createElement(_components.span, { className: "hljs-attr",}, "copiers"), ": []\n}\n")), "\n", React.createElement(_components.hr, null ), "\n", React.createElement(_components.h3, null, "Readers"), "\n", React.createElement(_components.p, null, "A Reader returns back which files must be used in the project. It must export the following object:"), "\n", React.createElement(_components.pre, null, React.createElement(_components.code, { className: "hljs language-js" ,}, "{\n  ", React.createElement(_components.span, { className: "hljs-attr",}, "name"), ": ", React.createElement(_components.span, { className: "hljs-string",}, "\"example\""), ",\n  ", React.createElement(_components.span, { className: "hljs-attr",}, "run"), ": ", React.createElement(_components.span, { className: "hljs-function",}, "()=>"), "{\n    ", React.createElement(_components.span, { className: "hljs-keyword",}, "return"), " [", React.createElement(_components.span, { className: "hljs-string",}, "\"src/example.js\""), "] ", React.createElement(_components.span, { className: "hljs-comment",}, "// return an array of files"), "\n  }, ", React.createElement(_components.span, { className: "hljs-comment",}, "//a function that returns an array of files, if undefined, Packit will look for `pattern` property"), "\n\n  ", React.createElement(_components.span, { className: "hljs-attr",}, "pattern"), ": ", React.createElement(_components.span, { className: "hljs-string",}, "\"src/*.js\""), " ", React.createElement(_components.span, { className: "hljs-comment",}, "// a glob pattern to match files"), "\n  ", React.createElement(_components.span, { className: "hljs-attr",}, "exclude"), ": [", React.createElement(_components.span, { className: "hljs-string",}, "\"src/example.js\""), "] ", React.createElement(_components.span, { className: "hljs-comment",}, "// an array of files to exclude. Is optional even when you use `pattern` property"), "\n}\n")), "\n", React.createElement(_components.p, null, "By default, Reejs has three Readers:"), "\n", React.createElement(_components.ul, null, "\n", React.createElement(_components.li, null, "pages"), "\n", React.createElement(_components.li, null, "components"), "\n", React.createElement(_components.li, null, "apis"), "\n"), "\n", React.createElement(_components.p, null, "To override any of the inbuilt Reader(s), just export a new Reader in your config file with the same name (case-sensitive) and you're good to go!"), "\n", React.createElement(_components.hr, null ), "\n", React.createElement(_components.h3, null, "Transpilers"), "\n", React.createElement(_components.p, null, "A Transpiler will transpile the file for the extension it is configured for. It must export the following object:"), "\n", React.createElement(_components.pre, null, React.createElement(_components.code, { className: "hljs language-js" ,}, "{\n  ", React.createElement(_components.span, { className: "hljs-attr",}, "name"), ": ", React.createElement(_components.span, { className: "hljs-string",}, "\"js\""), ",\n  ", React.createElement(_components.span, { className: "hljs-attr",}, "run"), ": ", React.createElement(_components.span, { className: "hljs-function",}, "(", React.createElement(_components.span, { className: "hljs-params",}, "fileURL, service"), ")=>"), "{\n    ", React.createElement(_components.span, { className: "hljs-keyword",}, "return"), " fileURL; ", React.createElement(_components.span, { className: "hljs-comment",}, "// return the fileURL of transpiled/built file."), "\n    ", React.createElement(_components.span, { className: "hljs-comment",}, "//by default, Reejs saves files in `.reejs/serve/<shasum of fileURL>.js` format. we recommend you to do the same."), "\n    ", React.createElement(_components.span, { className: "hljs-comment",}, "//you can make use of `service` argument to check which service is packit running for. Take a look at the `Using Packit` section for more info."), "\n  }\n}\n")), "\n", React.createElement(_components.p, null, React.createElement(_components.a, { href: "#writers",}, "Writers"), " will be ask configured Transpiler to transpile the mentioned file, instead of transpiling the whole directory.\nThat's just one of the ", React.createElement(_components.strong, null, "ree"), "asons why Packit is so fast!"), "\n", React.createElement(_components.p, null, "So for the following ", React.createElement(_components.strong, null, "ree"), "ason, we expect the Transpiler to walk through the code provided to it, look for imports, and recursively transpile them too.\nPackit, or more specifically the Writer expects you to do so."), "\n", React.createElement(Alert, { text: "Make sure to use `@reejs/imports/specialFileImport.js` module if you want to enable URL Imports. This package is used under the hood for the following default Transpilers given below."                          ,} ), "\n", React.createElement(_components.p, null, "By default, Reejs has Transpilers set for the following file extensions:"), "\n", React.createElement(_components.ul, null, "\n", React.createElement(_components.li, null, "js"), "\n", React.createElement(_components.li, null, "jsx"), "\n", React.createElement(_components.li, null, "ts"), "\n", React.createElement(_components.li, null, "tsx"), "\n", React.createElement(_components.li, null, "mdx"), "\n", React.createElement(_components.li, null, "md"), "\n"), "\n", React.createElement(_components.p, null, "To override any of the inbuilt Transpiler(s), just export a new Transpiler in your config file with the same name (case-sensitive) and you're good to go!"), "\n", React.createElement(_components.hr, null ), "\n", React.createElement(_components.h3, null, "Writers"), "\n", React.createElement(_components.p, null, "A Writer will append text (code) to the end of the ", React.createElement(_components.code, null, "packit/index.js"), " in your project alongside that, it\nwill modify available ", React.createElement(_components.code, null, "DATA"), " property, add/removing/modifying variables that it has processed and provide it to the next Writer(s)."), "\n", React.createElement(_components.p, null, "Unlike Readers & Transpilers, Writers are processed serially (without using ", React.createElement(_components.code, null, "await Promise.all()"), "), in order to make sure that the code is appended in the correct order, and the necessary ", React.createElement(_components.code, null, "DATA"), " property is available to the next Writer(s)."));
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? React.createElement(MDXLayout, { ...props,}, React.createElement(_createMdxContent, { ...props,} )) : _createMdxContent(props);
}
export default MDXContent;

//# sourceURL=src/md/basics/packit.mdx