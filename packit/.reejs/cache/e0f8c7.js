/* esm.sh - esbuild bundle(micromark-extension-mdx-expression@1.0.8) node production */
import{factoryMdxExpression as d}from"./586482.js";import{factorySpace as h}from"./cfc29b.js";import{markdownLineEnding as y,markdownSpace as T}from"./967460.js";function z(f){let r=f||{},x=r.addResult,o=r.acorn,u=r.spread,e=r.allowEmpty,s;if(e==null&&(e=!0),o){if(!o.parseExpressionAt)throw new Error("Expected a proper `acorn` instance passed in as `options.acorn`");s=Object.assign({ecmaVersion:2020,sourceType:"module"},r.acornOptions)}else if(r.acornOptions||r.addResult)throw new Error("Expected an `acorn` instance passed in as `options.acorn`");return{flow:{[123]:{tokenize:m,concrete:!0}},text:{[123]:{tokenize:E}}};function m(t,i,a){let p=this;return c;function c(n){return w(n)}function w(n){return d.call(p,t,k,"mdxFlowExpression","mdxFlowExpressionMarker","mdxFlowExpressionChunk",o,s,x,u,e)(n)}function k(n){return T(n)?h(t,l,"whitespace")(n):l(n)}function l(n){return n===null||y(n)?i(n):a(n)}}function E(t,i){let a=this;return p;function p(c){return d.call(a,t,i,"mdxTextExpression","mdxTextExpressionMarker","mdxTextExpressionChunk",o,s,x,u,e,!0)(c)}}}export{z as mdxExpression};
//# sourceMappingURL=micromark-extension-mdx-expression.mjs.map